# Based on https://github.com/facebook/chef-cookbooks/blob/master/cookbooks/fb_systemd/resources/override.rb
resource_name 'osl_systemd_unit_drop_in'
provides 'osl_systemd_unit_drop_in'
unified_mode true

default_action :create

property :override_name, String, name_property: true
property :unit_name, String, required: [:create]
property :content, [String, Hash], required: false
property :triggers_reload, [true, false], default: true
property :instance, String, default: 'system'

action_class do
  def override_dir
    "/etc/systemd/#{new_resource.instance}/#{new_resource.unit_name}.d"
  end
end

action :create do
  directory override_dir do
    recursive true
  end

  file ::File.join(override_dir, "#{new_resource.override_name}.conf") do
    content to_ini(new_resource.content).prepend("# Generated by Chef\n")
    notifies :run, 'execute[systemctl daemon-reload]', :immediately if new_resource.triggers_reload
    verify { to_ini(new_resource.content) }
  end

  execute 'systemctl daemon-reload' do
    action :nothing
  end
end

action :delete do
  if ::Dir.exist?(override_dir)
    file ::File.join(override_dir, "#{new_resource.override_name}.conf") do
      action :delete
      notifies :run, 'execute[systemctl daemon-reload]', :immediately if new_resource.triggers_reload
    end

    # if the override directory is empty, there's no reason to keep it around so
    # we reap it as well; this is done here to ensure multiple overrides can be
    # defined against the same unit
    if ::Dir.empty?(override_dir)
      directory override_dir do
        action :delete
      end
    end
  end

  execute 'systemctl daemon-reload' do
    action :nothing
  end
end

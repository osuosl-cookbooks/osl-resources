require_relative '../../spec_helper'

describe 'osl-resources-test::osl_caddy' do
  ALL_PLATFORMS.each do |p|
    context "#{p[:platform]} #{p[:version]}" do
      cached(:chef_run) do
        ChefSpec::SoloRunner.new(p.dup.merge(
          step_into: %w(osl_caddy osl_caddy_site)
        )).converge(described_recipe)
      end
      it 'converges successfully' do
        expect { chef_run }.to_not raise_error
      end

      # osl_caddy
      it do
        is_expected.to create_yum_repository('caddy').with(
          description: 'Copr repo for caddy owned by @caddy',
          baseurl: "https://download.copr.fedorainfracloud.org/results/@caddy/caddy/epel-#{p[:version].to_i}-$basearch/",
          gpgkey: 'https://download.copr.fedorainfracloud.org/results/@caddy/caddy/pubkey.gpg'
        )
      end

      it { is_expected.to install_package 'caddy' }
      it { is_expected.to create_directory '/etc/caddy/sites' }

      it do
        is_expected.to create_template('/etc/caddy/Caddyfile').with(
          cookbook: 'osl-resources',
          source: 'Caddyfile.erb',
          variables: {
            kitchen: false,
            global_options: [],
          }
        )
      end

      it { expect(chef_run.template('/etc/caddy/Caddyfile')).to notify('service[caddy]').to(:reload) }
      it { is_expected.to enable_service 'caddy' }
      it { is_expected.to start_service 'caddy' }

      # osl_caddy_site
      it do
        is_expected.to create_file('/etc/caddy/sites/simple.example.org.caddyfile').with(
          content: <<~EOF
            # This file was generated by Chef Infra
            # Do NOT modify this file by hand.
            simple.example.org {
              log
              respond "Hello from a simple site!"
            }
          EOF
        )
      end

      it do
        is_expected.to create_template('/etc/caddy/sites/hash.example.org.caddyfile').with(
          cookbook: 'osl-resources',
          source: 'Caddyfile-site.erb',
          variables: {
            content: "hash.example.org {\n  log\n  root * /var/www/hash.example.org\n  file_server\n  header +X-Content-Type-Options nosniff\n  header -Server\n  header X-Frame-Options SAMEORIGIN\n  header {\"Strict-Transport-Security\"=>\"max-age=31536000; includeSubDomains; preload\"}\n  header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n  tls {\n    protocols tls1.2 tls1.3\n    ciphers TLS_AES_128_GCM_SHA256\n    ciphers TLS_CHACHA20_POLY1305_SHA256\n    curves x25519\n  }\n  route /special/* {\n    respond \"This is a special route\" 200\n    # Route-specific comment\n  }\n  # This is a raw comment block, processed as-is\n  # Example of a route with specific ordering and handlers\n  route /assets/* {\n    header Cache-Control \"public, max-age=3600\"\n    try_files {path} /index.html\n    file_server {\n      hide .git .DS_Store\n    }\n  }\n  \n  # Another snippet demonstrating a handle_errors block\n  handle_errors {\n    rewrite * /error.html\n    file_server\n  }\n}",
          }
        )
      end

      it { expect(chef_run.osl_caddy_site('simple.example.org')).to notify('osl_caddy[default]').to(:reload) }
      it { expect(chef_run.osl_caddy_site('hash.example.org')).to notify('osl_caddy[default]').to(:reload) }
    end
  end
end

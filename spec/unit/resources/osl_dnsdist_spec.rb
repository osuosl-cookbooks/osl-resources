require_relative '../../spec_helper'

describe 'osl_dnsdist' do
  platform 'centos', '8'
  cached(:subject) { chef_run }
  step_into :osl_dnsdist

  recipe do
    osl_dnsdist 'default' do
      servers(
        '127.0.0.1' => {
          'qps' => 1000,
        }
      )
    end

    osl_dnsdist 'opts' do
      listen_addresses %w(127.0.0.2 127.0.0.3)
      servers(
        '127.0.0.2' => { 'qps' => 1000 },
        '127.0.0.3' => { 'qps' => 100 }
      )
      acls %w(140.211.166.0/23 10.0.0.0/23)
      console_address '127.0.0.1:5198'
      console_key 'secret'
      netmask_groups(
        'osl_only' => %w(
          140.211.15.0/24
          140.211.10.0/24
        )
      )
      webserver_address '0.0.0.0:8084'
      webserver_password 'password'
      extra_options [
        "addAction(NetmaskGroupRule(osl_only), PoolAction('caching'))",
      ]
    end
  end

  it { is_expected.to include_recipe 'osl-repos::epel' }
  it { is_expected.to install_package 'dnsdist' }
  it { is_expected.to_not install_package 'yum-plugin-priorities' }

  context 'centos 7' do
    platform 'centos', '7'
    cached(:subject) { chef_run }
    step_into :osl_dnsdist

    recipe do
      osl_dnsdist 'default' do
        servers(
          '127.0.0.1' => {
            'qps' => 1000,
          }
        )
      end
    end
    it { is_expected.to install_package 'yum-plugin-priorities' }
  end

  it do
    is_expected.to create_yum_repository('dnsdist').with(
      baseurl: 'https://repo.powerdns.com/el/$basearch/$releasever/dnsdist-17',
      gpgcheck: true,
      gpgkey: 'https://repo.powerdns.com/FD380FBB-pub.asc',
      priority: '90',
      includepkgs: 'dnsdist*'
    )
  end

  it { is_expected.to_not create_template('/etc/dnsdist/acl-default') }

  it do
    is_expected.to create_template('/etc/dnsdist/acl-opts').with(
      cookbook: 'osl-resources',
      source: 'dnsdist-common.conf.erb',
      owner: 'dnsdist',
      group: 'dnsdist',
      mode: '0700',
      variables: {
        items: %w(10.0.0.0/23 140.211.166.0/23),
      }
    )
  end

  it do
    is_expected.to render_file('/etc/dnsdist/acl-opts').with_content(
      <<~EOF
       # This file was generated by Chef Infra
       # Do NOT modify this file by hand.
       10.0.0.0/23
       140.211.166.0/23
      EOF
    )
  end

  it do
    expect(chef_run.template('/etc/dnsdist/acl-opts')).to notify('service[dnsdist@opts.service]').to(:restart)
  end

  it do
    is_expected.to create_template('/etc/dnsdist/dnsdist-default.conf').with(
      cookbook: 'osl-resources',
      source: 'dnsdist.conf.erb',
      sensitive: true,
      owner: 'dnsdist',
      group: 'dnsdist',
      mode: '0700',
      variables: {
        acls: nil,
        console_key: nil,
        console_address: '127.0.0.1',
        extra_options: nil,
        instance_name: 'default',
        listen_addresses: %w(127.0.0.1 ::1),
        netmask_groups: '',
        server_policy: 'firstAvailable',
        servers: { '127.0.0.1' => "address='127.0.0.1', qps=1000" },
        webserver_acl: '127.0.0.1,::1',
        webserver_address: '127.0.0.1:8083',
        webserver_password: nil,
      }
    )
  end

  it do
    is_expected.to create_template('/etc/dnsdist/dnsdist-opts.conf').with(
      source: 'dnsdist.conf.erb',
      sensitive: true,
      variables: {
        acls: %w(140.211.166.0/23 10.0.0.0/23),
        console_key: 'secret',
        console_address: '127.0.0.1:5198',
        extra_options: [
          "addAction(NetmaskGroupRule(osl_only), PoolAction('caching'))",
        ],
        instance_name: 'opts',
        listen_addresses: %w(127.0.0.2 127.0.0.3),
        netmask_groups: "osl_only = newNMG()\nosl_only:addMask('140.211.10.0/24')\nosl_only:addMask('140.211.15.0/24')",
        server_policy: 'firstAvailable',
        servers: {
          '127.0.0.2' => "address='127.0.0.2', qps=1000",
          '127.0.0.3' => "address='127.0.0.3', qps=100",
        },
        webserver_acl: '127.0.0.1,::1',
        webserver_address: '0.0.0.0:8084',
        webserver_password: 'password',
      }
    )
  end

  it do
    expect(chef_run.template('/etc/dnsdist/dnsdist-default.conf')).to notify('service[dnsdist@default.service]').to(:restart)
    expect(chef_run.template('/etc/dnsdist/dnsdist-opts.conf')).to notify('service[dnsdist@opts.service]').to(:restart)
  end

  it do
    is_expected.to render_file('/etc/dnsdist/dnsdist-default.conf').with_content(
      <<~EOF
       -- This file was generated by Chef Infra
       -- Do NOT modify this file by hand.
       addLocal("127.0.0.1")
       addLocal("::1")
       newServer({address='127.0.0.1', qps=1000})
       setServerPolicy(firstAvailable)
      EOF
    )
  end

  it do
    is_expected.to render_file('/etc/dnsdist/dnsdist-opts.conf').with_content(
      <<~EOF
       -- This file was generated by Chef Infra
       -- Do NOT modify this file by hand.
       addLocal("127.0.0.2")
       addLocal("127.0.0.3")
       setACLFromFile("/etc/dnsdist/acl-opts")
       newServer({address='127.0.0.2', qps=1000})
       newServer({address='127.0.0.3', qps=100})
       osl_only = newNMG()
       osl_only:addMask('140.211.10.0/24')
       osl_only:addMask('140.211.15.0/24')
       setServerPolicy(firstAvailable)
       webserver('0.0.0.0:8084', 'password')
       setWebserverConfig({statsRequireAuthentication=false, acl='127.0.0.1,::1'})
       controlSocket('127.0.0.1:5198')
       setKey("secret")
       -- Extra options
       addAction(NetmaskGroupRule(osl_only), PoolAction('caching'))
      EOF
    )
  end

  it { is_expected.to enable_service('dnsdist@default.service') }
  it { is_expected.to start_service('dnsdist@default.service') }
  it { is_expected.to enable_service('dnsdist@opts.service') }
  it { is_expected.to start_service('dnsdist@opts.service') }
end

require_relative '../../spec_helper'

describe 'osl_systemd_unit_drop_in' do
  platform 'centos'
  step_into :osl_systemd_unit_drop_in

  context 'create_delete' do
    cached(:subject) { chef_run }

    recipe do
      osl_systemd_unit_drop_in 'default' do
        unit_name 'testing'
        content({
          'Unit' => {
            'Key1' => 'Val1',
            'Key2' => 'Val2',
          },
          'Service' => {
            'Key3' => 'Val3',
          },
        })
        action [:create, :delete]
      end
    end

    before do
      allow(Dir).to receive(:exist?).with('/etc/systemd/system/testing.d').and_return(true)
      allow(Dir).to receive(:empty?).with('/etc/systemd/system/testing.d').and_return(true)
    end

    it do
      is_expected.to create_file('/etc/systemd/system/testing.d/default.conf').with(
        content:
        <<~EOU
          # Generated by Chef
          [Unit]
          Key1 = Val1
          Key2 = Val2

          [Service]
          Key3 = Val3
        EOU
      )
    end

    it do
      is_expected.to nothing_execute('systemctl daemon-reload')
    end

    it do
      expect(subject.file('/etc/systemd/system/testing.d/default.conf'))
        .to notify('execute[systemctl daemon-reload]').to(:run).immediately
    end

    it do
      is_expected.to delete_file('/etc/systemd/system/testing.d/default.conf')
    end
  end

  context 'only_delete' do
    cached(:subject) { chef_run }

    recipe do
      osl_systemd_unit_drop_in 'default' do
        unit_name 'testing'
        action :delete
      end
    end

    before do
      allow(Dir).to receive(:exist?).with('/etc/systemd/system/testing.d').and_return(false)
    end

    it do
      is_expected.to_not delete_file('/etc/systemd/system/testing.d/default.conf')
    end
  end

  context 'no_reload' do
    cached(:subject) { chef_run }

    recipe do
      osl_systemd_unit_drop_in 'default' do
        unit_name 'testing'
        content({
          'Unit' => {
            'Key1' => 'Val1',
            'Key2' => 'Val2',
          },
          'Service' => {
            'Key3' => 'Val3',
          },
        })
        triggers_reload false
      end
    end

    before do
      allow(Dir).to receive(:exist?).with('/etc/systemd/system/testing.d').and_return(false)
    end

    it do
      expect(subject.file('/etc/systemd/system/testing.d/default.conf'))
        .to_not notify('execute[systemctl daemon-reload]')
    end
  end
end
